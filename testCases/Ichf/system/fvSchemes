/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
//    default         Gauss linear;
    div(phi)	    Gauss linear;
    div(phi,U)      Gauss upwind;
    div(phi,Yi_h)   Gauss limitedLinear01 1;
    div(phi,hs)     Gauss upwind;
    div(phiU,p)     Gauss upwind;
    div(phid,p)     Gauss upwind;
    div(phi,epsilon) Gauss upwind;
    div(phi,k)       Gauss upwind;
    div((muEff*dev2(grad(U).T()))) Gauss linear;  
    div((muEff*dev2(T(grad(U))))) Gauss linear;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
    div(phi,K)      Gauss linear;
    div(phiU,p_amb) Gauss upwind;
    div(phiU,pKin) Gauss upwind;
}

laplacianSchemes
{
    default         Gauss linear corrected;
    laplacian(muEff,U) Gauss linear corrected;
    laplacian(DkEff,k) Gauss linear corrected;
    laplacian(DBEff,B) Gauss linear corrected;
    laplacian(alphaEff,hs) Gauss linear uncorrected;
    laplacian(alphaEff,fu) Gauss linear uncorrected;
    laplacian(alphaEff,ft) Gauss linear uncorrected;
    laplacian((((rho*(1|A(U)))*rho)*gh)) Gauss linear uncorrected;
    laplacian(interpolate((rho*(1|A(U)))),p) Gauss linear uncorrected;
    laplacian(gammaRad,G) Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default         no;
    Ts;
    p;
}

// ************************************************************************* //
